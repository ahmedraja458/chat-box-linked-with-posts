function get_project_color_inline_css($project_id) {
    $project_color = get_field('project_color', $project_id);
    return $project_color ? 'background-color:' . esc_attr($project_color) . ';' : '';
}




function update_last_read() {
    if (!is_user_logged_in() || !isset($_POST['project_id'])) {
        wp_send_json_error(['message' => 'Invalid request']);
    }

    $project_id = intval($_POST['project_id']);
    $user_id = get_current_user_id();

    // Update last read timestamp to current time
    update_user_meta($user_id, "last_read_project_{$project_id}", time());

    wp_send_json_success(['message' => 'Last read updated']);
}
add_action('wp_ajax_update_last_read', 'update_last_read');



// Register Shortcode for Project Discussions
function project_discussion_shortcode() {
    if (!is_user_logged_in()) {
        return '<p>You must be logged in to view your discussions.</p>';
    }

    ob_start();
    $user_id = get_current_user_id();

    // Fetch projects assigned to the logged-in user
    $args = array(
        'post_type'      => 'project',
        'posts_per_page' => -1,
        'meta_query'     => array(
            array(
                'key'     => 'client_portal_user', // Adjust meta key if needed
                'value'   => $user_id,
                'compare' => '='
            )
        )
    );

    $projects = get_posts($args);
    ?>

    <div class="discussion-section">
<!--        <h2>Discussion</h2> -->
    <div class="project-list">
    <?php foreach ($projects as $project) : ?>
        <?php 
            $comment_count = get_comments([
                'post_id' => $project->ID,
                'status'  => 'approve',
                'count'   => true,
            ]);
        ?>
       <div class="project-card" style="<?php echo get_project_color_inline_css($project->ID); ?>" data-project-id="<?php echo esc_attr($project->ID); ?>" data-project-title="<?php echo esc_attr($project->post_title); ?>">

    <img decoding="async" src="https://customer.codeslogistics.com/wp-content/uploads/2025/03/Group-22.svg" alt="Project Icon" class="project-icon">
    <span class="project-title">
        <?php echo esc_html($project->post_title); ?>
    </span>
    <?php if ($comment_count > 0) : ?>
        <span class="comment-badge"><?php echo esc_html($comment_count); ?></span>
    <?php endif; ?>
</div>

    <?php endforeach; ?>
</div>


<div class="chat-popup" id="chatPopup">
    <div class="chat-header">
        <span id="chatTitle" data-id="">Chat</span> 
        <span class="close-btn" onclick="closeChat()">Ã—</span>
    </div>
    <div class="chat-body" id="chatBody">Loading...</div>
    <div class="chat-footer">
        <input type="text" id="chatInput" placeholder="Type a message..." />
        <button id="sendMessageBtn">Send</button>
    </div>
</div>

    <script>
document.addEventListener("DOMContentLoaded", function () {
function openChat(projectID, projectName, projectColor) {
    let chatTitle = document.getElementById("chatTitle");
    chatTitle.innerText = projectName;
    chatTitle.setAttribute("data-id", projectID);
    document.getElementById("chatPopup").style.display = "block";
    document.getElementById("chatPopup").setAttribute("data-project-color", projectColor);

    // Apply the project color to the chat header
    document.querySelector(".chat-header").style.backgroundColor = projectColor;

    // Apply the project color to the reply buttons and send message button
    document.querySelectorAll(".reply-button, #sendMessageBtn").forEach(button => {
        button.style.backgroundColor = projectColor;
    });

    // Hide the comment badge for the opened project
    let projectCard = document.querySelector(`.project-card[data-project-id="${projectID}"]`);
    if (projectCard) {
        let badge = projectCard.querySelector(".comment-badge");
        if (badge) {
            badge.style.display = "none";
        }
    }

    // Update last read timestamp
    updateLastRead(projectID);

    // Fetch comments for the project
    fetchComments(projectID);
}

    function closeChat() {
        document.getElementById("chatPopup").style.display = "none";
    }

    function fetchComments(projectID) {
        fetch("<?php echo admin_url('admin-ajax.php'); ?>?action=fetch_project_comments&project_id=" + projectID)
            .then(response => response.text())
            .then(data => {
                document.getElementById("chatBody").innerHTML = data;
            });
    }

    function updateLastRead(projectID) {
        fetch("<?php echo admin_url('admin-ajax.php'); ?>", {
            method: "POST",
            body: new URLSearchParams({
                action: "update_last_read",
                project_id: projectID
            }),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        });
    }

    function replyToComment(commentID) {
        let inputField = document.getElementById("chatInput");
        inputField.setAttribute("data-reply-to", commentID);
        inputField.placeholder = "Replying to comment #" + commentID + "...";
        inputField.focus();
    }

    // Attach click event to project cards
    document.querySelectorAll(".project-card").forEach(card => {
        card.addEventListener("click", function () {
            let projectID = this.getAttribute("data-project-id");
            let projectName = this.getAttribute("data-project-title");
            let projectColor = this.style.backgroundColor; // Get the background color of the project card
            openChat(projectID, projectName, projectColor);
        });
    });

    // Send message button event listener
    document.getElementById("sendMessageBtn").addEventListener("click", function () {
        let projectID = document.getElementById("chatTitle").getAttribute("data-id");
        let message = document.getElementById("chatInput").value;
        let parentID = document.getElementById("chatInput").getAttribute("data-reply-to") || 0;

        if (!message.trim()) return;

        fetch("<?php echo admin_url('admin-ajax.php'); ?>", {
            method: "POST",
            body: new URLSearchParams({
                action: "post_project_comment",
                project_id: projectID,
                message: message,
                parent_id: parentID
            }),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        }).then(response => response.json())
          .then(data => {
              if (data.success) {
                  document.getElementById("chatInput").value = "";
                  document.getElementById("chatInput").removeAttribute("data-reply-to");
                  document.getElementById("chatInput").placeholder = "Type a message...";
                  fetchComments(projectID);
              }
          });
    });

    // Expose functions to the global scope
    window.openChat = openChat;
    window.closeChat = closeChat;
    window.replyToComment = replyToComment;
});

    </script>

    <style>

.chat-message {
    background: #ffffff;
    padding: 10px 15px;
    border-radius: 8px;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    position: relative;
}

.chat-message strong {
    color: #333;
    margin-right: 8px;
}

.comment-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50px;
    margin-right: 10px;
    object-fit: cover;
}
img.comment-avatar {
    border-radius: 50px;
}
.comment-meta {
    display: flex;
    flex-direction: column;
}

.comment-time {
    font-size: 12px;
    color: #777;
    margin-top: 2px;
}

.comment-replies {
    margin-left: 40px;
    border-left: 2px solid #ddd;
    padding-left: 10px;
}

.chat-reply {
    background: #F8FAFF;
    padding: 8px 12px;
    border-radius: 6px;
    margin-bottom: 6px;
}

.reply-button {
    border: none;
    color: #ffffff;
    font-size: 12px;
    cursor: pointer;
    margin-top: 4px;
}

.reply-button:hover {
    text-decoration: underline;
}

.chat-footer {
    display: flex;
    padding: 10px;
    border-top: 1px solid #ddd;
    background: #fff;
    align-items: center;
}

.chat-footer input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    outline: none;
}

.chat-footer button {
/*     background: #f78426; */
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 5px;
    margin-left: 5px;
}


.comment-badge {
    position: absolute; /* Relative to .project-card */
    top: 5px;
    right: 5px;
    background: red;
    color: white;
    font-size: 12px;
    width: 20px;
    height: 20px;
    text-align: center;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    visibility: visible !important; /* Ensures it remains visible */
    opacity: 1 !important;
}

/* Prevent badge from appearing when empty */
.comment-badge:empty {
    display: none;
}



		.project-icon {
    width: 50px;
    height: 20px;
			margin-right: 20px;
}
        .discussion-section {
    width: 100%;
    /* Make it take full width */
    max-width: 800px;
    /* Limit max width to align with notifications section */
    margin-left: 35px;
    /* Align it to the left */
    padding-left: 20px;
    /* Add some spacing if needed */
}

.project-list {
      display: grid;
    grid-template-columns: repeat(2, 1fr);
    /* Two columns */
    gap: 15px;
    justify-content: left;
    /* Align items to the left */
    align-items: start;
}



.project-card {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-radius: 12px;
    cursor: pointer;
/*     box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1); */
    transition: 0.3s;
    font-family: 'Plus Jakarta Sans', sans-serif;
/* background: #FFE7D6; */
	background-color: var(--project-color);
    margin-top: 20px;
    font-size: 18px;
    font-weight: 600;
    position:relative;
}

.project-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
}

.chat-popup {
    display: none;
    position: fixed;
    right: 20px;
    bottom: 20px;
    width: 450px;
    background: white;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    overflow: hidden;
	z-index: 1;
}

.chat-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
/*     background: #f78426; */
	background-color: var(--project-color); /* Fallback color */  ;
    color: white;
    font-size: 18px;
	font-family: 'Plus Jakarta Sans', sans-serif;
    font-weight: 600;
}

.chat-body {
    height: 300px;
    overflow-y: auto;
    padding: 10px;
	    font-family: 'Plus Jakarta Sans', sans-serif;
    font-weight: 400;

}

.chat-footer {
    display: flex;
    padding: 10px;
    border-top: 1px solid #ddd;
    background: #fff;
}

.chat-footer input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 5px;
    outline: none;
}

.chat-footer button {
    background: #f78426;
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    border-radius: 5px;
	
}

.close-btn {
    cursor: pointer;
    font-size: 20px;
}
    </style>

    <?php
    return ob_get_clean();
}
add_shortcode('project_discussion', 'project_discussion_shortcode');


// Fetch Project Comments
function fetch_project_comments() {
    if (!isset($_GET['project_id'])) {
        wp_die();
    }

    $project_id = intval($_GET['project_id']);
    $comments = get_comments([
        'post_id' => $project_id,
        'status'  => 'approve',
        'order'   => 'ASC',
        'parent'  => 0 // Fetch only top-level comments
    ]);

    foreach ($comments as $comment) {
        $user_avatar = get_avatar_url($comment->user_id, ['size' => 32]);
        $time_ago = human_time_diff(strtotime($comment->comment_date), current_time('timestamp')) . ' ago';

        echo '<div class="chat-message">
                <img src="' . esc_url($user_avatar) . '" class="comment-avatar">
                <div class="comment-meta">
                    <strong>' . esc_html($comment->comment_author) . '</strong>
                    <span class="comment-time">' . esc_html($time_ago) . '</span>
                    <p>' . esc_html($comment->comment_content) . '</p>
                    <button class="reply-button" onclick="replyToComment(' . $comment->comment_ID . ')">Reply</button>
                </div>
              </div>';

        // Fetch replies to the current comment
        $replies = get_comments([
            'post_id'  => $project_id,
            'status'   => 'approve',
            'order'    => 'ASC',
            'parent'   => $comment->comment_ID
        ]);

        if (!empty($replies)) {
            echo '<div class="comment-replies">';
            foreach ($replies as $reply) {
                $reply_avatar = get_avatar_url($reply->user_id, ['size' => 28]);
                $reply_time_ago = human_time_diff(strtotime($reply->comment_date), current_time('timestamp')) . ' ago';

                echo '<div class="chat-reply">
                        <img src="' . esc_url($reply_avatar) . '" class="comment-avatar">
                        <div class="comment-meta">
                            <strong>' . esc_html($reply->comment_author) . '</strong>
                            <span class="comment-time">' . esc_html($reply_time_ago) . '</span>
                            <p>' . esc_html($reply->comment_content) . '</p>
                        </div>
                      </div>';
            }
            echo '</div>';
        }
    }
    wp_die();
}

add_action('wp_ajax_fetch_project_comments', 'fetch_project_comments');
add_action('wp_ajax_nopriv_fetch_project_comments', 'fetch_project_comments');

// Post Project Comment or Reply
function post_project_comment() {
    if (!isset($_POST['project_id']) || !isset($_POST['message'])) {
        wp_send_json_error(['message' => 'Invalid input.']);
    }

    $project_id = intval($_POST['project_id']);
    $message = sanitize_text_field($_POST['message']);
    $parent_id = isset($_POST['parent_id']) ? intval($_POST['parent_id']) : 0; // Default to 0 if not a reply
    $user_id = get_current_user_id();
    $user_info = get_userdata($user_id);

    $commentdata = array(
        'comment_post_ID' => $project_id,
        'comment_content' => $message,
        'user_id'         => $user_id,
        'comment_author'  => $user_info->display_name,
        'comment_parent'  => $parent_id,
        'comment_approved'=> 1,
    );

    wp_insert_comment($commentdata);
    wp_send_json_success(['message' => 'Comment posted successfully.']);
}
add_action('wp_ajax_post_project_comment', 'post_project_comment');
